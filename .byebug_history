quit
continue
sorted.index(16971)
sorted.index(8309)
sorted.find(8039)
sorted
quit
worst.last.calc.worst
worst.first.calc.worst
worst.first
worst
worst = store_collection.sort_by { |store| store.calc.worst }
worst = store_collection.sort_by { |store| store.worst }
store_collection.map { |store| store.calc.worst }.sort
store_collection.includes(:calc).map { |store| store.calc.worst }.sort
store_collection.sort_by { |store| store.calc.worst } 
store_collection
quit
sorted
quit
continue
macro
store_collection
store_collections
macro
quit
data["results"] = []
data["results"]
data.results
data
data = JSON.load(open("https://maps.googleapis.com/maps/api/geocode/json?address=" + query + "&key=AIzaSyCeMPHcWvEYRmPBI5XyeBS9vPsAvqxLD7I"))
quit
query
c
s
c
store.boro.split(" ").join("+")c
store.boro.split(" ").join("+")
store.boro.split(" ").join("+")}
store.boro.split(" ")
store.boro
store.street.split(" ").join("+")
store.street.split(" ").join("+)
store.street
store.building
quit
query
data
quit
c
data
 c
data
quit
c
quit
lat = data["results"][0]["geometry"]["location"]
lat = data["results"][0]["geometry"]["bounds"]
lat = data["results"][0]["geometry"]
lat = data["results"][0]["geometry"]["bounds"]["northeast"]["lat"]
data = JSON.load(open("https://maps.googleapis.com/maps/api/geocode/json?address=" + query + "&key=AIzaSyCeMPHcWvEYRmPBI5XyeBS9vPsAvqxLD7I"))
data
query = "#{store.building}+#{store.street.split(" ").join("+")},+#{store.boro.split(" ").join("+")},+NY"
query
quit
continue
data["results"][0]["geometry"]["bounds"]["northeast"]["lat"]
data["results"][0]["geometry"]["bounds"]["northeast"]
data["results"][0]["geometry"]["bounds"]["lat"]
data["results"][0]["geometry"]["bounds"]
data["results"][0]["geometry"]["northeast"]
data["results"][0]["geometry"]
query
data["results"][0]["address_components"]
data["results"][0]["southwest"]
data["results"][0]["lat"]
data["results"][0]["location"]
data["results"][0]
data["results"]
data.results
data[0]
data[1]
data
data.location
data
quit
JSON.load(open("https://maps.googleapis.com/maps/api/geocode/json?address=437+MADISON+AVENUE,+MANHATTAN,+NY&key=AIzaSyCeMPHcWvEYRmPBI5XyeBS9vPsAvqxLD7I"))
JSON.load(open("https://maps.googleapis.com/maps/api/geocode/json?address=437+MADISON+AVENUE,+MANHATTAN,+NY&key=AIzaSyCeMPHcWvEYRmPBI5XyeBS9vPsAvqxLD7I")
JSON.load
JSON.parse(open("https://maps.googleapis.com/maps/api/geocode/json?address=437+MADISON+AVENUE,+MANHATTAN,+NY&key=AIzaSyCeMPHcWvEYRmPBI5XyeBS9vPsAvqxLD7I")
JSON.parse(open("https://maps.googleapis.com/maps/api/geocode/json?address=437+MADISON+AVENUE,+MANHATTAN,+NY&key=AIzaSyCeMPHcWvEYRmPBI5XyeBS9vPsAvqxLD7I"))
JSON.parse(open("https://maps.googleapis.com/maps/api/geocode/json?address=437+MADISON+AVENUE,+MANHATTAN,+NY&key=AIzaSyCeMPHcWvEYRmPBI5XyeBS9vPsAvqxLD7I")
require 'open-uri'
json
quit
json
quit
store.lat.to_s
store.street
store.building
store.lng.to_s
c
store.lng.to_s
store.lat.to_s
store.lat
c
params
@stores
c
Store.ransack(cuisine_type_cont: "Chin", zipcode_eq: "11375")c.result.length
Store.ransack(cuisine_type_cont: "Chin", zipcode_eq: "11375").result.length
Store.ransack(cuisine_type_cont: "Chin", zipcode: "11375").result.length
Store.ransack(cuisine_type_cont: "Chin", zipcode_start: "11375").result.length
Store.ransack(cuisine_type_cont: "Chin").result.length
Store.ransack(cuisine_type_cont: "Chin")
 @stores = Store.includes(:calc).ransack(cuisine_type_cont: params[:cuisine_type], zipcode_eq: params[:zipcode], boro_cont: params[:boro]).result.order("calcs.#{params[:query]} DESC").limit(10)
params
c
paramsc
params
c
Store.ransack(zipcode_eq: "11375").result.length
Store.ransack(zipcode_start: "11375").result.length
Store.ransack(zipcode_start: "").result.length
Store.ransack(zipcode_cont: "").result.length
Store.ransack(zipcode_cont: "11375").result.length
Store.ransack(zipcode_cont: params[:zipcode].to_i).result.length
Store.ransack(zipcode_cont: params[:zipcode]).result.length
Store.ransack(zipcode_cont: params[:zipcode]).result
params[:zipcode].to_i
params[:zipcode]
continue
Store.ransack(zipcode: params[:zipcode]).result.to_a
Store.ransack(zipcode_start: params[:zipcode]).result.to_a
Store.ransack(zipcode_start: params[:zipcode]).result
Store.ransack(zipcode_start: params[:zipcode])
params[:zipcode]
params[:cuisine_type]
params[:cuisine_tupe]
c
params
c
params
cparams
c
params
c
params
c
quit
qut
store
params
quit
Store.all.order_by(last_visited)
Store.all
Store.all.includes(:calcs).where("calc.average < 12") .to_a
Store.all.includes(:calcs).where("calc.average < 12") 
Store.first.calc
Store.all
Store.includes(:calcs).to_a
Store.includes(:calcs)
Store.include(:calcs)
Store.all.includes(:calcs).to_a
Store.all.includes(:calcs)
Store.all.includes(:calcs).order(last_visited)
Store.all.includes(:calcs).order(last_visited:)
Store.all.includes(:calcs).order(:calc.mice)
Store.all.includes(:calcs).order(calc.mice)
Store.all.includes(:calc).order(calc.mice)
Store.all.includes(:calc).order("calc.mice")
Store.all.includes(:calc).order("calc.mice").to_a
Store.all.includes(:calc).order("calc.mice")
Store.includes(:calc).order("calc.mice").to_a
Store.includes(:calc).order("calc.mice")
Store.all.order(params[:mice]).first.mice
Store.all.order(params[:mice]).first
Store.all.order(params[:mice])
Store.all.order(params["q"].to_sym).to_a
Store.all.order(params["q"]).to_a
Store.all.order(params["q"])
params
c
params
c
cc
c
params[:page] = 2 
params[:page]
page
params
quit
score
score.round
round(score)
Math.round(score)
c
score
quit
macro
maco
c
store.calc.last
store.calc.average
store.calc.mice / store.calc.inspections.to_f * 100
store.calc.mice / store.calc.inspections.to_f
store.calc.mice
last
store.calc.inspections
c
score
last
c
score
quit
last
score
quit
Store.new.to_a
Store.all
a
a = Store.new
Store.new
a.delete
a.display_address
a
a.save
a.zipcode = 5
a.save
a.camis = 1
a.save
a.display_address = query.location.display_address
a = Store.new
query.location.display_address
c
quit
query.rating_image_url
query.image_url
query.location.neighborhoods
query.neighborhoods
query.rating_img_url_large
query.display_phone
query
query.cross_streets
query.location
query.location.cross_streets
c
query.location.cross_streets
query.cross_streets
query.snippet_text
query.phone
query.url
query.rating_img_url
query.review_count
query[:rating_img_url]
query["rating_img_url"]
