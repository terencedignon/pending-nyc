c
params
c
 @stores = Store.all.where("#{query[0]} LIKE ?", "%" + query[1] +  "%")
params
c
paramsc
params
c
@stores.ransack(name_cont: "al").result
@stores.ransack
@stores
c
params
qquery
@stores
c
@stores
s
@stores
params[:query]
query
c
query
@stores = @stores.where("#{query[0]} LIKE ?", "%" + query[1].to_s + "%").map{|store| p store.boro }
c
@stores = @stores.where("#{query[0]} LIKE ?", "%" + query[1].to_s + "%").map{|store| p store.boro }
@stores = @stores.where("#{query[0]} LIKE ?", "%" + query[1].to_s + "%")
query
c
 @stores = @stores.where("#{query[0]} LIKE ?", "%" + query[1].to_s + "%").length
 @stores = @stores.where("#{query[0]} LIKE ?", "%" + query[1].to_s + "%")
query
params
c
@stores.where("#{query[0]} LIKE ?", "%" + query[1].to_s + "%").length
@stores.where("#{query[0]} LIKE ?", "%" + query[1].to_s + "%")
query
c
cc
c
@stores.map{|store| store.boro }  
@stores.length
@stores
k@stores
c
s
query[1]
query[0]
query
c
params
c
@stores.length
@stores
c
cc
c
query
c
@stores = @stores.where("name LIKE ?", "%" + "Hello" + "%")
params[:query]
@stores
c
params[:options]
params[:query]
params
c
cc
c
params
c
 c
params
params[:query]
params
parmas
c
params[:options][:query]
params[:options]
params
c
s
params[:main_map_query]
c
params[:options]
@stores.where("stores.cuisine_type LIKE ?", "%Ameri%").length
@stores.where("stores.cuisine_type LIKE ?", "%American%").length
@stores.where("stores.cuisine_type LIKE ?", "%American%")
@stores.where("stores.cuisine_type LIKE American ").to_a
@stores.where("stores.cuisine_type LIKE American ")
@stores.where("cuisine_type LIKE American ")
@stores.where("cuisine_type LIKE American ").to_a
@stores.where("cuisine_type IN American ").to_a
@stores.where("cuisine_type IN American ")
@stores.where("cuisine_type IN American ").length
@stores.where(cuisine_type: "American ").length
@stores.where(cuisine_type: "American ")
@stores.where(cuisine_type: params[:options][:cuisine_type])
@stores.where(cuisine_type: params[:options][:cuisine_ty[e])
params
@stores.length
@stores
c
Store.all.where("cuisine_type IN Amer").to_a
Store.all.where("cuisine_type IN Amer")
Store.where("cuisine_type IN American").to_a
Store.where("cuisine_type IN American")
Store.where("cuisine_type IN AMER").to_a
Store.where("cuisine_type IN AMER")
Store.where(cuisine_type IN  "")
Store.where(cuisine_type: "")
params
c
Store.where(name IN "Chinese")
params[:options]
params
c
params
c
params
c
Store.where("cuisine_type = ? AND (lat BETWEEN ? AND ?) AND (lng BETWEEN ? AND ?)", cuisine_type, south, north, west, east).length
Store.where("cuisine_type = ? BETWEEN ? AND ? AND lng BETWEEN ? AND ?", cuisine_type, south, north, east, west)
c
Store.where("cuisine_type = ? AND (lat BETWEEN ? AND ?) AND (lng BETWEEN ? AND ?)", cuisine_type, south, north, west, east).length
Store.where("cuisine_type = ? AND (lat BETWEEN ? AND ?) AND (lng BETWEEN ? AND ?)", cuisine_type, south, north, west, east)
Store.where("(lat BETWEEN ? AND ?) AND (lng BETWEEN ? AND ?)", south, north, west, east)
Store.where("(lat BETWEEN ? AND ?) AND (lng BETWEEN ? AND ?)", south, north, east, west)
Store.where("lat BETWEEN ? AND ? AND (lng BETWEEN ? AND ?)", south, north, east, west)
Store.where("lat BETWEEN ? AND ? AND lng BETWEEN ? AND ?", south, north, east, west)
Store.where("cuisine_type = ? BETWEEN ? AND ? AND lng BETWEEN ? AND ?", cuisine_type, south, north, east, west)
c
result
s
result
c
params[:bounds][:south]
params[:bounds]
c
params[:map_query]
params[:map_query}
params
c
Store.where(cuisine_type: params[:cuisine_type])
Store.where(cuisine_type: params[:cuisine_type]
Store.new
Store.find_by_cuisine_type(cuisine_type)
Store.where(cuisine_type: cuisine_type)
params
c
cc
c
x
c
xc
x
c
Store.where("lat BETWEEN 40.7551508142724 AND 40.78115264219773 AND lng BETWEEN -73.99992913769529 AND -73.96559686230466").lengthc
Store.where("lat BETWEEN 40.7551508142724 AND 40.78115264219773 AND lng BETWEEN -73.99992913769529 AND -73.96559686230466").length
 Store.where("lat BETWEEN 40.7551508142724 AND 40.78115264219773").length
params
c
Store.where("lat BETWEEN 40.768153000000005 AND 40.768153000000005").length
Store.where("lat BETWEEN 40.768153000000005 AND 40.768153000000005")
params
c
q
cuisine_store
c
worst
c
worst
c
worst_store_id
worst
c
worst
c
worst_store_idc
worst_store_id
worst
c
worst_store_id
worst
c
worst_store_id
worst
c
zipcode_store
zipcode
store.zipcode
c
quit
c
quit
c
quit
c
quit
all_inspections
initial_inspections
roach_count
fly_count
mouse_count
mouse
quit
continue
c
continue
inspect.inspection_type =~ /Z/
inspect.inspection_type =~ /Initial Inspection/
inspect.inspection_type.includes?("Initial Inspection")
inspect.inspection_type
inspect
inspection_type
inspection
inspection_type.match(/Initial Inspection/)
inspection_type.match(/"Initial Inspection"/)
inspection_type.includes?("Initial Inspection")
inspection_type.include("Initial Inspection")
inspect
c
Store.first
store
quit
c
quit
qui
continue
item["inspection_date"].to_datetime == item["inspection_date"]
item["inspection_date"].to_datetime
DateTime.new
DateTme.new(item["inspection_date"])
item["inspection_date"]
DateTime.strptime(item["inspection_date"])
DateTime
r = Date.new
Date
Datetime
Date.new(item["inspection_date"]
item["street"]
item
q
quit
continue
store
c
item 
